#+TITE: Cours Django
#+author: Ciss√© Aly
#+date: <2022-11-04 ven.>


* Les √©tapes pour l'utilisation de django
** On install et lance l'environnement virtuel :
python3 -m venv env : permet cr√©er l'environnement.
source env/bin/activate : permet d'activer l'environnement
pip install Django: install django
pip freeze > requirements.txt : liste les besoins dans le fichiers txt
django-admin startproject nom_projet : permet de cr√©er notre projet
** Dans le repertoire <nom_projet> :
python manage.py runserver -> permet lancer le server
python manage.py migration  -> permet de cr√©er le fichier sqlLite3
python manage.py startapp listings -> permet d'installer une application <listings> : comme un composant


** suite :
On doit √©galement installer notre application <listings> en modifiant le fichier settings.py
√† la fin, on ajoute 'listings'

- ensuite dans le fichier listings/views.py :
  on import un librairie :

  #+begin_src  python
    from django.http import HttpResponse
    from django.shortcuts import render

    def hello(request):
        return HttpResponse("<h1>Hello somes html django view </h1>")
  #+end_src

Une fois cette vue d√©finie, on doit l'associer √† une url.
dans le fichier  merchex/urls.py

    on import la vue

    #+begin_src python
      from listings import views

      urlpatterns = [
          path('admin/', admin.site.urls),
          path('hello/',views.hello),
          ]
    #+end_src
  On pourra donc lancer notre server en mettant la root /hello pour aficher le html propos√©.
  en lancant le server : python manage.py runserver.

  Il ne faut pas tapper /hello/ mais il faut toujours taper hello/



python manage.py shell
>>> from listings.models import Band
>>> band = Band()
>>> band.name = 'De la Soul'
>>> band
<Band: Band object (None)>
>>> band.save()
>>> band
<Band: Band object (1)>
>>> band = Band()
>>> band.name = 'Cut copy'
>>> band.save()
>>> band
<Band: Band object (2)>
>>> band = Band.objects.create(name='Foo Fighters')
>>> band
<Band: Band object (3)>
>>> Band.objects.court()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'court'
>>> Band.objects.count()
3
>>> Band.objects.all()
<QuerySet [<Band: Band object (1)>, <Band: Band object (2)>, <Band: Band object


*** Une migration:
    Une migration est un esemble d'instructions permettant de passer le schÈma de votre base de donnÈes
    d'un Ètat ‡ un autre. Il est important de noter que ces instructions peuvent Ítre exÈcutÈes automatiquement, comme un code.

    <<Configuration par le code >>s s: toutes les Ètapes nÈcessaires ‡ la construction d'une application ne doivent pas Ítre
    effectuÈes ‡ la main, mais plutÙt inscrites dans le code.

** Enregistrement des objets dans la base de donnÈe
   On ajoute dans le model.py, la classe correspondante
   #+begin_src python
     # dans le fichier models.py
	  class category(models.Model):
	       name = models.fields.CharField(max_length=100)
	       description = models.fields.TextField()
   #+end_src

   On passe au shell python, puis on effectue une migration: avec la commande
   #+begin_src shell
     python manage.py makemigrations
     python manage.py migrate
   #+end_src

   Maintenant on peut enregistrer des objets dans la base de donnÈes dans le shell de Django
   On passe dans le shell en python: python manage.py shell
   #+begin_src python
     from listings.models import Band

     cate = Category()
     cate.name = 'Fruits'
     cate.description = 'Petite description'

     cate # pour afficher l'objet
     cate.save()
   #+end_src

   DeuxiËme mÈthode pour savegarder un object

   #+begin_src python
     cate = cate.objects.create(name='Fuits')
     cate.name # Permet de recuperer le nom
     cate.objects.count() # donne le nombre d'objects
     cate.objects.all() # liste l'ensemble des objects
   #+end_src

   

* Ecommerce
Pour la cr√©er de ce site, on a dabord cr√©er notre projet avec les commandes
#+begin_quote
django-admin startproject ecommerce <et>
django-admin startapp shop
#+end_quote

Une fois le projet cr√©er, on part dans le settings du projet pour ajouter les
configuration comme dans le projet pr√©c√©dent.

** Cr√©ation super admin

 + python manage.py createsuperuser
   Username et Password
