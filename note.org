#+TITE: Cours Django
#+author: CissÃ© Aly
#+date: <2022-11-04 ven.>


* Les Ã©tapes pour l'utilisation de django
** On install et lance l'environnement virtuel :
python3 -m venv env : permet crÃ©er l'environnement.
source env/bin/activate : permet d'activer l'environnement
pip install Django: install django
pip freeze > requirements.txt : liste les besoins dans le fichiers txt
django-admin startproject nom_projet : permet de crÃ©er notre projet
** Dans le repertoire <nom_projet> :
python manage.py runserver -> permet lancer le server
python manage.py migration  -> permet de crÃ©er le fichier sqlLite3
python manage.py startapp listings -> permet d'installer une application <listings> : comme un composant


** suite :
On doit Ã©galement installer notre application <listings> en modifiant le fichier settings.py
Ã  la fin, on ajoute 'listings'

- ensuite dans le fichier listings/views.py :
  on import un librairie :

  #+begin_src  python
    from django.http import HttpResponse
    from django.shortcuts import render

    def hello(request):
        return HttpResponse("<h1>Hello somes html django view </h1>")
  #+end_src

Une fois cette vue dÃ©finie, on doit l'associer Ã  une url.
dans le fichier  merchex/urls.py

    on import la vue

    #+begin_src python
      from listings import views

      urlpatterns = [
          path('admin/', admin.site.urls),
          path('hello/',views.hello),
          ]
    #+end_src
  On pourra donc lancer notre server en mettant la root /hello pour aficher le html proposÃ©.
  en lancant le server : python manage.py runserver.

  Il ne faut pas tapper /hello/ mais il faut toujours taper hello/



python manage.py shell
>>> from listings.models import Band
>>> band = Band()
>>> band.name = 'De la Soul'
>>> band
<Band: Band object (None)>
>>> band.save()
>>> band
<Band: Band object (1)>
>>> band = Band()
>>> band.name = 'Cut copy'
>>> band.save()
>>> band
<Band: Band object (2)>
>>> band = Band.objects.create(name='Foo Fighters')
>>> band
<Band: Band object (3)>
>>> Band.objects.court()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'court'
>>> Band.objects.count()
3
>>> Band.objects.all()
<QuerySet [<Band: Band object (1)>, <Band: Band object (2)>, <Band: Band object


*** Une migration:
    Une migration est un esemble d'instructions permettant de passer le schéma de votre base de données
    d'un état à un autre. Il est important de noter que ces instructions peuvent être exécutées automatiquement, comme un code.

    <<Configuration par le code >>s s: toutes les étapes nécessaires à la construction d'une application ne doivent pas être
    effectuées à la main, mais plutôt inscrites dans le code.

** Enregistrement des objets dans la base de donnée
   On ajoute dans le model.py, la classe correspondante
   #+begin_src python
     # dans le fichier models.py
	  class category(models.Model):
	       name = models.fields.CharField(max_length=100)
	       description = models.fields.TextField()
   #+end_src

   On passe au shell python, puis on effectue une migration: avec la commande
   #+begin_src shell
     python manage.py makemigrations
     python manage.py migrate
   #+end_src

   Maintenant on peut enregistrer des objets dans la base de données dans le shell de Django
   On passe dans le shell en python: python manage.py shell
   #+begin_src python
     from listings.models import Band

     cate = Category()
     cate.name = 'Fruits'
     cate.description = 'Petite description'

     cate # pour afficher l'objet
     cate.save()
   #+end_src

   Deuxième méthode pour savegarder un object

   #+begin_src python
     cate = cate.objects.create(name='Fuits')
     cate.name # Permet de recuperer le nom
     cate.objects.count() # donne le nombre d'objects
     cate.objects.all() # liste l'ensemble des objects
   #+end_src


   + Un Modèle définit les caractéristiques et les comportements d'un objet dont vous voulez garder la trace
     dans notre application. Il ressemble à une class standard mais sait comment enregistrer (<<persister>>)
     ses données dans une basd de données.

   + Une migration est un ensemble d'instructions qui font passer notre base de données
     d'un état à un autre, par exemple en créant une nouvelle table. Nous pouvons utiliser
     le CLI de Django pour générer et exécuter les migrations à notre place.

   + On peut utiliser le shell de Django pour insérer de nouveaux objets dans notre base de données.

   + Dans une vue, nous pouvons récupérer des objets dans la base de données et afficher leurs données dans nos pages.
   + Django contient un ORM (Object-Relational Mapping): C'est un programme qui nou permet de manipuler
     les classes python, qui seront converties en tables et champ de Bdd. Plus besoin d'écrire une requette sql spécifique, django s'occupe de tout.
     
   + Pour faire passer notre modèle d'un état A à un état B, il faut faire des migrations à chaque fois.

** Séparation logique de l'application de la présentation avec un gabarit Django
   Il faut éviter d'écrire directement du code html dans du code.
   Il faut donc utiliser les gabarits ou templates de django.
   Le MVT: Modèle(Stocke les données), Vue (récupère les données du modèle à injecter dans le bon template)
   Template(Affiche des données).

   Sans l'utilisation du MVT, notre vue aura deux responsabilités: recup les données et les afficher.

*** Utilisation d'un filtre de gaarits dans un gabarit:
    On peut utiliser par exemple : lower et upper

    #+begin_src html
      <li>{{ band.name|upper }}</li>
      <li>{{ band.name|lower }}</li>
      <li>{{ bands|length }}</li>
    #+end_src

    















    
   
* Ecommerce
Pour la crÃ©er de ce site, on a dabord crÃ©er notre projet avec les commandes
#+begin_quote
django-admin startproject ecommerce <et>
django-admin startapp shop
#+end_quote

Une fois le projet crÃ©er, on part dans le settings du projet pour ajouter les
configuration comme dans le projet prÃ©cÃ©dent.

** CrÃ©ation super admin

 + python manage.py createsuperuser
   Username et Password
